(load "./sec3.5.3")

;; (pairs integers integers) を調べよ。

; pairを与えると何項目かをsearchしてくる手続きを書いて、性質を調べることができる。
; そしてがんばれば一般校も書ける。
; 例:
; (1 10)  => 17
; (10 10) => 1022

(define ones (cons-stream 1 ones))
(define integers (cons-stream 1 (add-streams ones integers)))
(define s (pairs integers integers))

(display-stream-n s 50)
; (1 1), (1 2), (2 2), (1 3), (2 3), (1 4), (3 3), (1 5), (2 4), (1 6), (3 4), (1 7), (2 5), (1 8), (4 4), (1 9), (2 6), (1 10), (3 5)

;; (1 n) が2以降1つおきに出てる。一般校の半分が推測できる
;;
;;     (1 1)     -- (when   n==1)
;;     (1 n/2+1) -- (when n%2==0)
;;
;; よって => (1 100)は198個目に現れる。

;; :'<,'>s/(1 \d\{-}), // などとして(1 n)を取り除いてみると...
;; (2 2), (2 3), (3 3), (2 4), (3 4), (2 5), (4 4), (2 6), (3 5), (2 7), (4 5), (2 8), (3 6), (2 9), (5 5), (2 10), (3 7), (2 11), (4 6), (2 12), (3 8), (2 13), (5 6), (2 14)
;; 次は(2 n)が1つおきに増加していることがわかる。
;  n
;  5 => 3,
;  9 => 4,
; 13 => 5...

;;     (2 2)           -- (when   n==3)
;;     (2 ((n-1)/4)+2) -- (when n>3, n%4==1)

;; 同様に(3 n)は8個おき、(4 n)は16個...すなわち(m n)は2^mおきに登場する。
;; 2^m個おきに出てくる中のn個目だから、全体のindexとしては(m n) の一般項っぽいものは n * 2^m 。

; よって(99 100)は9700番目, (100 100)は10200番目あたりにでてくるはず。


