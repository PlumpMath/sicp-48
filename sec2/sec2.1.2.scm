;;; 2.1.2 抽象の壁
;; sec2.1.1.scm で定義したmake-ratは定義時に規約にしたが,
;; 今回はmake-ratで"作るとき"ではなく, 取り出すときに規約にする実装を試しに書いてみよう.
(define (make-rat n d)
  (cons n d)) ;; makeするときはふつうにconsするだけ
(define (numer x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (car x) g)))
(define (denom x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (cdr x) g)))

;; 有理数たくさん作るけどちょっとしか使わない, という場合は今回定義した形式のほうが効率良いよね. 場合によるよ.
;; で, sec2.1.2のキモは, そうした下層の実装を変えても抽象化された層には影響しない.

;;=> q2.2.scm 抽象の壁の別の例, 有理数の次は線分の定義を考えようという話.
